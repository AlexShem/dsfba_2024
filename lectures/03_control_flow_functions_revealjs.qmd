---
title: "Data Science for Business Analytics"
subtitle: "Control Flow and Functions"
date: "2024-10-07"
author: "Professor Alex"
institute: "HEC Lausanne, University of Lausanne"
format:
  revealjs:
    theme: default
    logo: "unilogo_noir_300dpi.png"
    footer: "Data Science with Professor Alex"
    number-depth: 1
    slide-number: c/t
    code-annotations: hover
    code-line-numbers: true
    code-link: false
    highlight-style: github
    toc: true
    toc-title: "Agenda"
    number-sections: true
    preview-links: auto
    smaller: false
    footnotes-hover: true
---

```{r}
#| echo: false

set.seed(123)
```

# Introduction {.smaller}

::::{.columns}
:::{.column width=50%}
- **Control flow**:
  - Allows to execute code depending on conditions
    - `if` statements
    - `ifelse` statements
  - Allows to run code repeatedly
    - `for` loops
    - `while` loops

:::

:::{.column width=50%}
- **Functions**:
  - Identify repeated patterns in code
  - Encapsulate code into reusable functions
- **Iterations**:
  - Apply functions to multiple elements
  - `lapply`, `sapply`, `vapply`, `mapply`, `apply`

:::
::::

# Control Flow

## `if` Statements {.smaller}

The basic idea of `if` statements: if a `condition` is

- `TRUE`, then execute `true_action`
- `FALSE`, then execute an optional `false_action`.

```r
if (condition) true_action
if (condition) true_action else false_action
```

Typically, actions are compound statements contained within `{`.

```{r}
#| echo: true
#| eval: false

grade <- function(x) {
  if (x > 90) {
    "A"
  } else if (x > 80) {
    "B"
  } else if (x > 50) {
    "C"
  } else {
    "F"
  }
}
```

## `if` Statements (cont'd) {.smaller}

::::{.columns}

:::{.column width=35%}

- `if` may return a value, so you can assign it to a variable:^[Only do this when it fits on one line; otherwise it's hard to read.]

```{r}
#| echo: true
x1 <- if (TRUE) 1 else 2
x2 <- if (FALSE) 1 else 2

c(x1, x2)
```

:::

:::{.column width=65%}

- When using `if` without `else`:
  - Returns `NULL` if the condition is `FALSE`.
  - Useful with functions like `c()`/`paste()` dropping `NULL` inputs.

```{r}
#| echo: true
greet <- function(name, birthday = FALSE) {
  paste0("Hi ", name, if (birthday) " and HAPPY BIRTHDAY") # <1>
}
greet("Maria", FALSE)
greet("Jaime", TRUE)
```
1. `paste0()` concatenates strings without spaces.

:::

::::

## Invalid `if` Inputs

- `if` expects a single logical value.
- So, the `condition` should evaluate to a single `TRUE` or `FALSE` value.

```{r}
#| echo: true
#| error: true
#| code-line-numbers: false

if ("x") 1
if (logical()) 1
if (NA) 1
if (c(TRUE, FALSE)) 1
```

## Vectorised `if()` statements {.smaller}

- `ifelse()` is a vectorised version of `if`.
  - **Structure**: `ifelse(condition, true_action, false_action)`.^[Use `true_action` and `false_action` of the same type.]
  - **Output**: A vector of the same length as the condition.

```{r}
#| echo: true

x <- 1:9
ifelse(x %% 5 == 0, "XXX", as.character(x))
ifelse(x %% 2 == 0, "even", "odd")
```

- For any number of condition-vector pairs use [`dplyr::case_when()`](https://dplyr.tidyverse.org/reference/case_when.html).

```{r}
#| echo: true

dplyr::case_when(
  x %% 6 == 0 ~ "fizz buzz",
  x %% 3 == 0 ~ "fizz",
  x %% 2 == 0 ~ "buzz",
  .default = as.character(x)
)
```

## `for` Loops {.smaller}

- `for` loops are used to iterate over a sequence of elements.
- **Structure**: `for (element in sequence) { code }`.
- This allows us to repeat the same operation for each element in the sequence.

:::{.margin-right}

```{r}
#| echo: true
#| eval: false

for (i in 1:3) {
  print(i)
}
```

:::

::::{.columns}

:::{.column width=50%}

Bad coding style:

```{r}
#| echo: true

set.seed(123)
tbl <- tibble::tibble(
  a = rnorm(10),
  b = rnorm(10),
  c = rnorm(10),
  d = rnorm(10)
)

output <- c(median(tbl$a), median(tbl$b), median(tbl$c), median(tbl$d))
print(output)
```

:::

:::{.column width=50%}

Good coding style:

```{r}
#| echo: true

set.seed(123)
tbl <- tibble::tibble(
  a = rnorm(10), # <1>
  b = rnorm(10), # <1>
  c = rnorm(10), # <1>
  d = rnorm(10) # <1>
)

output <- numeric(length(tbl))
for (i in seq_along(tbl)) { # <2>
  output[i] <- median(tbl[[i]])
}
print(output)
```
1. Generate a `tibble` with four columns each filled with 10 random numbers from a normal distribution with mean 0 and standard deviation 1.
2. `seq_along()` returns a sequence of integers from 1 to the length of `tbl`.

:::

::::

## `for` Early Exit

- There are situations where you want to exit a loop early.
- Use `next` to skip the current iteration and continue with the next one.
- Use `break` to exit a loop prematurely.

```{r}
#| echo: true

for (i in 1:10) {
  if (i < 3)
    next

  print(i)

  if (i >= 5)
    break
}
```

## `for` Common Pitfalls

::::{.columns}

:::{.column width=50%}

- **Pitfall 1**: Modifying the loop variable inside the loop.

```{r}
#| echo: true

x <- 1:5
for (i in x) { # <1>
  x <- x[1 : length(x)-1] # <1>
  print(i) # <1>
} # <1>
```
1. At the end of the first iteration, `x` is `1:4`. The code compiler preallocates the loop variable `i` to `1:5`, so it will iterate over `1:5` even though `x` is now `1:4`.

:::

:::{.column width=50%}

- **Pitfall 2**: Using `for` loops to grow objects.

```{r}
#| echo: true

output <- numeric(0)
for (i in 1:5) {
  output <- c(output, i)
}
```

This is inefficient because the object `output` is internally copied at each iteration.

:::

- **Pitfall 3**: Using `for` loops when vectorised operations are possible.
