---
title: "Data Science in Business Analytics"
subtitle: "Visualisation and Communication"
author: "Professor Alex [aleksandr.shemendyuk@unil.ch]"
date: "21/10/2024"
format: 
    beamer:
        include-in-header: ../latex/header.tex
        fontsize: 10pt
execute:
    echo: true
---

```{r setup}
#| echo: false
#| include: false

source("../R/common.R")
library(tidyverse)
library(knitr)
library(scales)
```

## Today

```{r echo = FALSE, out.width = "90%"}
include_graphics("../assets/r4ds/data-science-communicate.png")
```

\centering
\vspace{1cm}

Most of the material (e.g., the picture above) is borrowed from

**[R for data science](https://r4ds.hadley.nz/visualize)**

# Misleading Graphs

## Common Mistakes in Graphs

**Misleading Graphs** misrepresent data and can lead to incorrect conclusions.
  
- Common causes of misleading graphs:
  - **Excessive complexity** or **poor construction**.
  - **Incorrect interpretations** of accurately displayed data.
  
- **Unintentional errors**:
  - Lack of familiarity with graphing tools.
  - Misinterpretation of the data.
  - Inability to convey data accurately.

- **Intentional misuse**:
  - Often used in **false advertising** to mislead the audience.

- The field of **data visualisation** focuses on avoiding these errors.

## Truncated Y-Axis

- **Definition**: The Y-axis doesn't start at 0, exaggerating changes in the data.
- **Effect**: Small differences appear more dramatic than they really are.
- **Key Warning**: While this can make trends more noticeable, it can lead to overestimation of differences.

::: {#fig-truncated_y_axis layout-ncol=2}

![Truncated bar graph](../assets/visualization/Truncated_Bar_Graph.svg.png)

![Regular bar graph](../assets/visualization/Bar_graph.svg.png)

Truncated bar graph
:::

## Misleading Pie Charts

- **Definition**: 3D effects or poorly designed pie charts distort proportions.
- **Common Issues**:
  - 3D perspectives make some slices appear larger.
  - Thin slices are hard to compare.
  - Comparing different pie chart sizes is difficult.
- **Best Practice**: Use bar charts for clearer comparisons.

::: {#fig-misleading_pie_chart layout-ncol=2}

![Misleading pie chart](../assets/visualization/Misleading_Pie_Chart.png)

![Regular pie chart](../assets/visualization/Sample_Pie_Chart.png)

:::

## Improper Scaling of Images

- **Definition**: Pictograms or images are scaled by both height and width, misrepresenting data.
- **Effect**: The area is interpreted instead of the actual data value, leading to exaggerated differences.
- **Key Warning**: Ensure only one dimension (height or width) reflects the data.

::: {#fig-improper_scaling layout-ncol=3}

![Improper scaling](../assets/visualization/Improperly_scaled_picture_graph.svg.png)

![Regular](../assets/visualization/Picture_Graph.svg.png)

![Comparison](../assets/visualization/Comparison_of_properly_and_improperly_scaled_picture_graph.svg.png)

Comparison of image scaling
:::

## Drawing Good Graphs

- **Three Main Rules**:
  1. **Keep it simple**: If the "story" is simple, the graph should be simple.
  2. **Simplify complexity**: If the "story" is complex, make the graph look simple.
  3. **Tell the truth**: Always represent the data accurately.

- **Key Guidelines**:
  - Aim for a **high data-to-chart ratio** (more data, less decoration).
  - Use the **appropriate graph** for the purpose.
    - *Example*: Most graphs in Excel are **poor choices**.
    - Avoid pie charts! They're often misleading.
  - Ensure **completeness**:
    - Label all axes.
    - Indicate units.
    - Provide a title.
    - Include a legend if needed (e.g., for colour or line types).

## A Grammar of Graphics

- **Concept**: A grammar of graphics helps to **describe and create** graphics systematically.
  - Moves beyond specific plot types (e.g., scatterplots) to understand **deeper structures** in visualizations.

> "A grammar of graphics is a tool that enables us to concisely describe the components of a graphic"  
> --- Hadley Wickham

- **`ggplot2`**:
  - R implementation of the grammar of graphics.
  - A coherent system for creating a variety of graphs.
  - Similar to `dplyr` but for data visualization.
  - Learn once, apply broadly.

- **Learn More**: 
  - [The Layered Grammar of Graphics](http://vita.had.co.nz/papers/layered-grammar.html)
  - [The Grammar of Graphics (Book)](https://www.amazon.com/Grammar-Graphics-Statistics-Computing/dp/0387245448)

## The `mpg` Data Frame

```{r}
#| echo: false

mpg %>% head(n = 5)
```

- **Description**: Contains data from the US EPA on 38 car models.
  - **Variables**:
    - `displ`: Engine size (liters).
    - `hwy`: Highway fuel efficiency (miles per gallon).

- **Example Questions**:
  - Do cars with bigger engines use more fuel?
  - What is the relationship between engine size and fuel efficiency? Is it positive, negative, linear, or nonlinear?

## Creating a Plot

- **A Simple Scatterplot**:

```{r}
ggplot(data = mpg) +
  geom_point(mapping = aes(x = displ, y = hwy))
```

- **Graphing Template:**

```{r eval = FALSE}
ggplot(data = <DATA>) +
  <GEOM_FUNCTION>(mapping = aes(<MAPPINGS>))
```

# Aesthetics and Facets

## Aesthetic mappings

> "The greatest value of a picture is when it forces us to notice what we never expected to see."
> --- John Tukey

```{r}
#| out-width: 60%

ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
  geom_point() +
  geom_point(
    data = dplyr::filter(mpg, displ > 5, hwy > 20), 
    color = "red", size = 2.2
  )
```

## Aesthetic

- **How to add more variables** to a two-dimensional plot?
  - By mapping them to an **aesthetic**:
    - A visual property of the objects in your plot.
    - Examples include **size**, **shape**, or **color** of the points.
  
- **Terminology**:
  - **"Value"**: Describes the data.
  - **"Level"**: Describes aesthetic properties.

```{r, echo = FALSE, asp = 1/4}
ggplot() +
  geom_point(aes(1, 1), size = 20) +
  geom_point(aes(2, 1), size = 10) +
  geom_point(aes(3, 1), size = 20, shape = 17) +
  geom_point(aes(4, 1), size = 20, color = "blue") +
  scale_x_continuous(NULL, limits = c(0.5, 4.5), labels = NULL) +
  scale_y_continuous(NULL, limits = c(0.9, 1.1), labels = NULL) +
  theme(aspect.ratio = 1/3)
```

## Aesthetics Overview

- **Aesthetics** map variables in the data to **visual properties** in a plot.
  - They enhance the plot by adding more dimensions of information.
  - Common aesthetics include:
    - **Color**: Differentiate points by color.
    - **Size**: Represent categories with different point sizes.
    - **Alpha**: Control the transparency of points.
    - **Shape**: Distinguish points by their shapes.

- The following slides demonstrate these aesthetics in practice.

---

## Adding Classes to Your Plot

```{r}
ggplot(data = mpg) +
  geom_point(mapping = aes(x = displ, y = hwy, color = class))
```

- Use **color** to differentiate categories.
- In this example, different car classes are colored differently.
- Note: If you prefer British English, use `colour` instead of `color`.

---

## Manually Setting Aesthetics

```{r}
ggplot(data = mpg) +
  geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
```

- Aesthetics can also be set **manually**.
- Here, the points are uniformly colored blue.

---

## The **Size** Aesthetic

```{r}
ggplot(data = mpg) +
  geom_point(mapping = aes(x = displ, y = hwy, size = class))
```

- The **size** aesthetic maps categories to point sizes.
- In this case, different car classes are represented with different point sizes.

---

## The **Alpha** Aesthetic

```{r}
ggplot(data = mpg) +
  geom_point(mapping = aes(x = displ, y = hwy, alpha = class))
```

- The **alpha** aesthetic controls the transparency of points.
- More transparent points can indicate overlapping or less significant data points.

---

## The **Shape** Aesthetic

```{r}
ggplot(data = mpg) +
  geom_point(mapping = aes(x = displ, y = hwy, shape = class))
```

- The **shape** aesthetic maps categories to different point shapes.
- This is useful for distinguishing points when colors or sizes are not sufficient.

---

## A Remark on Aesthetic Values

- Aesthetic values must be [**appropriate for the aesthetic**](https://ggplot2.tidyverse.org/reference/aes_linetype_size_shape.html):
  - **Color**: Provide the name of a color as a character string (e.g., `"blue"`, `"red"`).
  - **Size**: The size of a point should be in millimeters (e.g., `size = 5`).
  - **Shape**: Shapes are represented by numbers (e.g., `shape = 16`).
    - Hollow shapes (0–14) have a border defined by `color`.
    - Solid shapes (15–18) are filled with `color`.
    - Filled shapes (21–24) have both a border and fill color.

\vspace{-.8cm}

```{r shapes}
#| echo: false

expand_grid(x = 0:4, y = 0:-4) %>% 
  mutate(shape = row_number()) %>% 
  ggplot(aes(x = x, y = y)) +
  geom_point(aes(shape = shape), size = 5, fill = "red") +
  scale_shape_identity() +
  geom_text(aes(label = shape), hjust = -2) +
  scale_x_continuous(NULL, breaks = NULL) +
  scale_y_continuous(NULL, breaks = NULL) +
  expand_limits(x = c(-0.5, 5), y = c(-4.5, 0.5)) +
  theme_minimal()
```

## Facets

```{r}
p <- ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
```

```{r}
#| echo: false
#| out-width: 40%

p
```

\vspace{-0.3cm}

:::: {.columns}
::: {.column width='48%'}

* Facet wrap

```{r, out.width="100%"}
p + facet_wrap(~ class, nrow = 2)
```

:::
::: {.column width='48%'}

* Facet grid

```{r, out.width="100%"}
p + facet_grid(drv ~ cyl)
```

:::
::::

# Geometric Objects and Statistical Transformations

## How Are These Two Plots Similar?

:::: {.columns}
::: {.column width='48%'}

```{r}
#| echo: false
#| out-width: 100%

ggplot(data = mpg) +
  geom_point(mapping = aes(x = displ, y = hwy))
```

:::
::: {.column width='48%'}

```{r}
#| echo: false
#| message: false
#| out-width: 100%

ggplot(data = mpg) +
  geom_smooth(mapping = aes(x = displ, y = hwy))
```

:::
::::

- A **geom**:
  - The geometric object a plot uses to represent data.
  - Plots are often described by their geom type:
    - **Bar charts** use `geom_bar`.
    - **Line charts** use `geom_line`.
    - **Boxplots** use `geom_boxplot`.
  - Exception:
    - **Scatterplots** use `geom_point`.

## Geometric Objects

- Every **geom** function takes a `mapping` argument.
- But **not every aesthetic works with every geom**:
  - **Shape** exists for `geom_point` but not for `geom_line`.
  - Conversely, **linetype** exists for `geom_line` but not for `geom_point`.

```{r message = FALSE, out.width="40%"}
ggplot(data = mpg) +
  geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
```

\vspace{-0.8cm}

- Additionally:
  - `ggplot2` provides over 30 geoms.
  - [Extension packages](https://www.ggplot2-exts.org) provide even more geoms.
  - Use [RStudio's Data Visualization Cheatsheet](https://rstudio.github.io/cheatsheets/html/data-visualization.html).
  - To learn more about any single geom, use the help function: `?geom_smooth`.


## Geoms and legends

```{r, message = FALSE}
ggplot(data = mpg) +
  geom_smooth(mapping = aes(x = displ, y = hwy, color = drv))
```

## Multiple geoms in the same plot

```{r, message = FALSE}
ggplot(mpg) +
  geom_point(mapping = aes(x = displ, y = hwy)) +
  geom_smooth(mapping = aes(x = displ, y = hwy))
```

## A better way

```{r, message = FALSE}
mpg %>% 
  ggplot(aes(x = displ, y = hwy)) +
  geom_point() +
  geom_smooth()
```

## Local vs global mappings

```{r, message = FALSE}
mpg %>%
  ggplot(aes(x = displ, y = hwy)) +
  geom_point(aes(color = class)) +
  geom_smooth()
```

## Layer dependent `data`

```{r, message = FALSE}
mpg %>% 
  ggplot(aes(x = displ, y = hwy)) +
  geom_point(aes(color = class)) +
  geom_smooth(data = filter(mpg, class == "subcompact"), se = FALSE)
```

## Stats: Intermediate Calculations

:::: {.columns}

::: {.column width='65%'}

- Some graphs, like **bar charts**, calculate new values to plot:
  - **Bar charts**, **histograms**, and **frequency polygons**:
    - Bin the data.
    - Plot bin counts (i.e., the number of points falling in each bin).
  - **Smoothers**:
    - Fit a model to your data.
    - Plot predictions from the model.
  - **Boxplots**:
    - Compute a robust summary of the data distribution.
    - Display the summary using a specially formatted box.

:::

::: {.column width='35%'}

```{r}
diamonds %>% 
  ggplot() +
  geom_bar(aes(x = cut))
```

:::

::::

## Statistical Transformations I

* A **stat**:
    * The algorithm used to calculate new values for a graph.
    * Short for statistical transformation.

```{r, echo = FALSE, out.width = "100%"}
knitr::include_graphics("../assets/r4ds/visualization-stat-bar.png")
```

\vspace{-0.3cm}

* `ggplot2` provides over 20 stats.
* Each `stat` is a function, get help as usual, e.g. `?stat_bin`.
* Use [RStudio's data visualization cheatsheet](https://github.com/rstudio/cheatsheets/raw/master/data-visualization-2.1.pdf) for a complete list.

## Statistical Transformations II

```{r}
#| eval: false

ggplot(data = diamonds, aes(x = cut)) +
  geom_bar(aes(fill = cut))
```

```{r, echo = FALSE, out.width = "150%"}
knitr::include_graphics("../assets/r4ds/visualization-grammar-1.png")
```

## Statistical Transformations III

```{r}
#| eval: false

ggplot(data = diamonds, aes(x = cut)) +
  geom_bar(aes(fill = cut))
```

```{r, echo = FALSE, out.width = "150%"}
knitr::include_graphics("../assets/r4ds/visualization-grammar-2.png")
```

## Statistical Transformations IV

```{r}
#| eval: false

ggplot(data = diamonds, aes(x = cut)) +
  geom_bar(aes(fill = cut))
```

```{r, echo = FALSE, out.width = "100%"}
knitr::include_graphics("../assets/r4ds/visualization-grammar-3.png")
```

## Geom and stat

* Every geom has a default stat and conversely.
  * `?geom_bar` shows that the default value for `stat` is "count".
  * Means that `geom_bar()` uses `stat_count()`.
  * `?stat_count` has a section called "Computed variables" with two new variables: `count` and `prop`.
* You can generally use geoms and stats interchangeably!

```{r, eval = FALSE}
ggplot(data = diamonds) +
  stat_count(mapping = aes(x = cut))
```

* Typically, use geoms without worrying about the stat.
* Reasons to use a stat explicitly:
    * To override the default stat.
    * To override the default mapping from transformed variables
    to aesthetics.

## Use a stat explicitly I

```{r}
ggplot(data = diamonds) +
  stat_summary(
    mapping = aes(x = cut, y = depth),
    fun.min = min,
    fun.max = max,
    fun = median
  )
```

## Use a stat explicitly II

```{r}
ggplot(data = diamonds) +
  geom_bar(mapping = aes(x = cut, y = after_stat(prop), group = 1))
```

- `after_stat()` is a helper function that allows you to access variables computed by the `geom_bar`:
    - `after_stat(count)`: the count of cases in each group.
    - `after_stat(prop)`: the proportion of cases in each group.

## Use a stat explicitly III

```{r}
demo <- tribble(~cut,         ~freq,
                "Fair",       1610,
                "Good",       4906,
                "Very Good",  12082,
                "Premium",    13791,
                "Ideal",      21551)
 ggplot(data = demo) +
   geom_bar(mapping = aes(x = cut, y = freq), stat = "identity")
```

## Digression: the `fill` aesthetic

```{r, fig.width=8}
ggplot(data = diamonds) +
  geom_bar(mapping = aes(x = cut, fill = cut))
```

## Fill and position ajustements

```{r, fig.width=8}
ggplot(data = diamonds) +
  geom_bar(mapping = aes(x = cut, fill = clarity))
```

* Automatically stacked by the **position adjustement**.
* `?position_stack` to learn more.

## Fill with `position = "identity"`

```{r, fig.width=8}
ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity)) +
  geom_bar(alpha = 1/5, position = "identity")
```

* Not very useful for bars because of overlap.
* `?position_identity` to learn more.

## Fill with `position = "fill"`

```{r, fig.width=8}
ggplot(data = diamonds) +
  geom_bar(aes(x = cut, fill = clarity), position = "fill")
```

* Makes it easier to compare proportions across groups.
* `?position_fill` to learn more.

## Fill with `position = "dodge"`

```{r, fig.width=8}
ggplot(data = diamonds) +
  geom_bar(aes(x = cut, fill = clarity), position = "dodge")
```

* Makes it easier to compare individual values.
* `?position_dodge` to learn more.

## `position = "jitter"`

```{r}
ggplot(data = mpg, aes(x = displ, y = hwy)) +
  geom_point() +
  geom_point(position = "jitter", color = "red")
```

* `?position_jitter` to learn more.

# Coordinate systems and the layered grammar of graphics

## Coordinate systems

* The most complicated part of `ggplot2`.
* Default: the Cartesian coordinate system.
* Other systems occasionally helpful:
    *   `coord_flip()` switches the x and y axes.
        -  *Superseded* in favour of `orientation` setting.
    *   `coord_quickmap()` sets the aspect ratio correctly for maps.
        - *Superseded* in favour of `coord_sf()`.
    *   `coord_polar()` uses polar coordinates.

## `coord_flip()` (*Superseded*)

```{r, out.width = "45%", fig.width=8}
#| layout-ncol: 2

ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
  geom_boxplot()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
  geom_boxplot() +
  coord_flip()
```

* Useful for:
    * horizontal boxplots and long labels.
    * *Superseded*: change `x` and `y` in the `aes()` instead. 


## `coord_polar()`

```{r, out.width = "45%", fig.width=9}
#| layout-ncol: 2

bar <- ggplot(data = diamonds) +
  geom_bar(
    aes(x = cut, fill = cut),
    show.legend = FALSE, width = 1
  ) +
  theme(aspect.ratio = 1) + labs(x = NULL, y = NULL)
bar + coord_flip()
bar + coord_polar()
```

## The layered grammar of graphics

```{r, eval = FALSE}
ggplot(data = <DATA>) +
  <GEOM_FUNCTION>(
     mapping = aes(<MAPPINGS>),
     stat = <STAT>,
     position = <POSITION>
  ) +
  <COORDINATE_FUNCTION> +
  <FACET_FUNCTION>
```

* A formal system for building plots,
* Uniquely describes _any_ plot as a combination of
    * a dataset,
    * a geom,
    * a set of mappings,
    * a stat,
    * a position adjustment,
    * a coordinate system,
    * and a faceting scheme.

# EDA Visualization

## Introduction to EDA Visualization

- **Exploratory Data Analysis (EDA)** focuses on:
  - **Visualizing patterns** in the data.
  - Identifying **trends**, **clusters**, and **outliers**.
  - Generating **questions** to further guide your analysis.

- Key graphs used in EDA:
  - **Histograms**: Explore the distribution of individual variables.
  - **Boxplots**: Summarize the distribution and detect outliers.
  - **Scatterplots**: Reveal relationships between two variables.

- **Goal**: Gain insights by exploring the data visually before performing detailed analysis.


## Understanding Histograms

- **Histograms** are used to visualize the distribution of a **single variable**.
- Data is grouped into **bins**, and the height of each bar represents the **count** of data points within each bin.
- Useful for identifying:
  - The **shape** of the distribution (e.g., skewness).
  - **Peaks** or clusters in the data.
  - Potential **outliers**.

```{r, echo=FALSE}
ggplot(data = diamonds) +
  geom_histogram(mapping = aes(x = carat), binwidth = 0.01)
```

---

## Insights from Histograms

- Histograms help generate **questions**:
  - Why are there more data points in certain bins?
  - Why are some bins nearly empty?
- Example (diamonds dataset):
  - Notice the **peaks** around whole numbers like 1 carat and 2 carats.
  - Possible question: Why are these specific values so common?

```{r}
#| out-width: 60%

ggplot(data = diamonds) +
  geom_histogram(mapping = aes(x = carat), binwidth = 0.05)
```

---

## Histograms and Outliers

- **Outliers**: Unusual values that stand out from the rest of the data.
- Example:
  - The `y` variable in the diamonds dataset shows extreme values that might be errors.
  - **Zooming in** helps reveal these outliers.

```{r}
#| out-width: 60%

ggplot(data = diamonds, aes(x = y)) +
  geom_histogram(binwidth = 0.5) +
  coord_cartesian(ylim = c(0, 50))
```

---

## Adjusting Bins in Histograms

- The **binwidth** controls the granularity of the histogram.
  - A smaller binwidth provides more detail but can make the plot harder to interpret.
  - A larger binwidth simplifies the plot but may obscure important details.
- Experiment with binwidth to get the most informative plot.

```{r}
#| out-width: 60%
ggplot(data = diamonds, aes(x = price)) +
  geom_histogram(binwidth = 500)
```

---

## Exploring Categorical and Numerical Variables

- A common task in exploratory data analysis is to explore how a **numerical variable** varies across levels of a **categorical variable**.
- Visualizing these relationships can provide insights such as:
  - Differences in distribution for each category.
  - Whether specific categories have more extreme values.
  
Example: How does carat weight (numerical) vary by diamond cut (categorical)?

---

## Boxplots: Categorical vs Numerical Variables

- **Boxplots** are an excellent choice to compare distributions of a numerical variable across different categories.
  - The box shows the **interquartile range** (middle 50% of data).
  - The line inside the box marks the **median**.
  - **Whiskers** extend to data points within 1.5 times the interquartile range.
  - **Outliers** are shown as points outside this range.

```{r}
#| out-width: 60%

ggplot(diamonds, aes(x = cut, y = carat)) +
  geom_boxplot()
```

---

## Boxplot: Construction Method

- **Boxplots** use the following calculations:
  - **Median**: The middle value of the data.
  - **Interquartile Range (IQR)**: The range between the 25th and 75th percentiles.
  - **Whiskers**: Extend to the most extreme data points within 1.5 times the IQR. The formula is: `1.5 * IQR`.
  - **Outliers**: Data points beyond the whiskers.

![](../assets/visualization/eda-boxplot.png){width=80% fig-align="center"}

---

## Violin Plots for More Detail

- **Violin plots** provide a richer view than boxplots by showing the **density distribution** of the data for each category.
  - A combination of a boxplot and a density plot.
  - Allows you to see **both the summary statistics** and the **distribution shape**.

```{r}
ggplot(diamonds, aes(x = cut, y = carat)) +
  geom_violin()
```

---

## Exploring Two Categorical Variables

- To explore the relationship between **two categorical variables**, we use counts or proportions.
- One of the simplest visualizations is a **count plot** (or bar plot), where the height of the bars reflects the count of observations in each combination of categories.
  
Example: Explore the relationship between `cut` and `color` of diamonds.

```{r}
#| out-width: 60%

ggplot(diamonds, aes(x = cut, fill = color)) +
  geom_bar(position = "dodge")
```

---

## Heatmaps for Two Categorical Variables

- **Heatmaps** offer a visual representation of the counts or proportions in a table format.
  - The intensity of the color reflects the magnitude of the count or proportion.
  - Useful when you want to compare the distribution of two categorical variables in a matrix form.

```{r}
#| out-width: 60%

ggplot(diamonds, aes(x = color, y = cut)) +
  geom_bin_2d(aes(fill = after_stat(count)))
```

---

## Scatterplots for Two Numerical Variables

- **Scatterplots** are a powerful tool for visualizing the relationship between **two numerical variables**.
- Example: Relationship between **carat** size and **price** of diamonds.
  - **Covariation** is visible as a **positive** and **exponential** relationship.
  - Larger diamonds tend to have higher prices.

```{r}
#| out-width: 60%

smaller <- diamonds %>% filter(carat < 3)
ggplot(smaller, aes(x = carat, y = price)) +
  geom_point()
```

---

## Managing Overplotting with Transparency

- **Overplotting** can obscure patterns in large datasets.
  - As the dataset grows, scatterplots become cluttered with overlapping points.
  - Solution: Adjust the **alpha aesthetic** to introduce **transparency**.
  - Clusters become visible, such as diamonds around 1, 1.5, and 2 carats.

```{r}
#| out-width: 60%

ggplot(smaller, aes(x = carat, y = price)) + 
  geom_point(alpha = 1 / 100)
```

---

## Binning Two Numerical Variables

- Another solution to overplotting is **binning**:
  - Use `geom_bin_2d()` for **rectangular bins**.
  - Use `geom_hex()` for **hexagonal bins**.
  - Fill colors represent **density** (number of points per bin).
  
:::: {.columns}

::: {.column width='48%'}

```{r}
smaller %>% 
  ggplot(aes(x = carat, y = price)) +
  geom_bin_2d()
```

:::

::: {.column width='48%'}

```{r}
smaller %>% 
  ggplot(aes(x = carat, y = price)) +
  geom_hex()
```

:::

::::

---

## Visualizing with Binned Boxplots

- Convert one continuous variable into bins to act like a categorical variable.
- Example: Binning **carat** and showing **boxplots** of price for each bin.
  - Box width can be proportional to the number of points in each bin with `varwidth = TRUE`.

```{r}
ggplot(smaller, aes(x = carat, y = price)) + 
  geom_boxplot(aes(group = cut_width(carat, 0.1)), varwidth = TRUE)
```

# Labels, guides, and scales

## Title and Caption

```{r, message = FALSE}
ggplot(mpg, aes(displ, hwy)) +
  geom_point(aes(color = class)) + geom_smooth(se = FALSE) +
  labs(
    title = "Engine size and fuel efficiency",
    caption = "Data from fueleconomy.gov"
  )
```

## Axes labels

```{r, message = FALSE, fig.width = 8}
ggplot(mpg, aes(displ, hwy)) +
  geom_point(aes(color = class)) +
  geom_smooth(se = FALSE) +
  labs(x = "Engine displacement (L)",
       y = "Highway fuel economy (mpg)",
       color = "Car type")
```

## Guides and scales

* Collectively axes and legends are called __guides__:
    * __Axes__ are used for x and y aesthetics.
    * __Legends__ are used for everything else.
* __Scales__ control mappings from data values to perceived values:

:::: {.columns}
::: {.column width='50%'}

```{r, out.width = "100%"}
ggplot(mpg, aes(displ, hwy)) +
    geom_point(aes(color = class)) # +
# scale_x_continuous() +
# scale_y_continuous() +
# scale_color_discrete()
```

:::
::: {.column width='50%'}

```{r, out.width = "100%"}
ggplot(mpg, aes(displ, hwy)) +
    geom_point(aes(color = class)) +
    scale_x_continuous() +
    scale_y_continuous() +
    scale_color_discrete()
```

:::
::::


## Axes ticks and legend keys

* To control the ticks on the axes and the keys on the legend:
    * `breaks`: ticks positions, or values associated with keys.
    * `labels`: text associated with each tick/key.
* The [`scales` package](https://scales.r-lib.org/) gives you tools to override the defaults!

```{r, out.width = "60%"}
ggplot(mpg, aes(displ, hwy)) + geom_point() +
    scale_y_continuous(breaks = seq(15, 40, by = 5))
```

<!-- ## Axis ticks and legend keys II -->

<!-- * A useful trick for maps, or for publishing plots where you can't share the absolute numbers: -->

<!-- ```{r} -->
<!-- ggplot(mpg, aes(displ, hwy)) + geom_point() + -->
<!--   scale_x_continuous(labels = NULL) + -->
<!--   scale_y_continuous(labels = NULL) -->
<!-- ``` -->

## Breaks and labels for date/datetime

* `date_labels`: a format as in `?readr::parse_datetime()`.  
* `scales::breaks_width`: a string like `"2 days"` or `"1 month"`.  

```{r, fig.width = 8}
presidential |> mutate(id = 33 + row_number()) |>
  ggplot(aes(x = start, y = id, color = party)) +
  geom_segment(aes(xend = end, yend = id)) + geom_point() +
  scale_x_date(name = NULL, breaks = presidential$start,
               minor_breaks = NULL, date_labels = "'%y") +
  scale_y_continuous(breaks = breaks_width(1), minor_breaks = NULL)
```

## Legend layout

```{r, out.width = "22%", results = "hold"}
#| layout-nrow: 1
base <- ggplot(mpg, aes(displ, hwy)) + geom_point(aes(color = class))

base + theme(legend.position = "left")
base + theme(legend.position = "top")
base + theme(legend.position = "bottom")
base + theme(legend.position = "right") # the default
```

* `legend.position = "none"` suppresses the display!

<!-- ## To control individual legends -->

<!-- * Use `guides()`, `guide_legend()` or `guide_colorbar()`: -->

<!-- ```{r, message = FALSE, fig.width = 8} -->
<!-- ggplot(mpg, aes(displ, hwy)) + -->
<!--   geom_point(aes(color = class)) + -->
<!--   geom_smooth(se = FALSE) + -->
<!--   theme(legend.position = "bottom") + -->
<!--   guides(color = guide_legend(nrow = 1, override.aes = list(size = 4))) -->
<!-- ``` -->

## Tranform the scales I

```{r}
ggplot(diamonds, aes(carat, price)) +
    geom_bin_2d()
```

## Tranform the scales II

```{r}
ggplot(diamonds, aes(log10(carat), log10(price))) +
    geom_bin_2d()
```

## Tranform the scales III

```{r}
ggplot(diamonds, aes(carat, price)) +
    geom_bin_2d() +
    scale_x_log10() +
    scale_y_log10()
```


# Colors, zooming and themes

## Replacing color scales
\vspace{0.4cm}

```{r, out.width = "45%"}
#| layout-nrow: 1
ggplot(mpg, aes(displ, hwy)) +
  geom_point(aes(color = drv), size = 3)

ggplot(mpg, aes(displ, hwy)) +
  geom_point(aes(color = drv), size = 3) +
  scale_color_brewer(palette = "Blues")
```


* Color scales come in two variety:
    * `scale_color_.()`  for the `color` aesthetics.
    * `scale_fill_.()` for the `fill` aesthetics.

## The ColorBrewer scales

* Documented online at <http://colorbrewer2.org/>
* Available via the __RColorBrewer__ package.

```{r, echo = FALSE, out.width = "90%", fig.width=10}
par(mar = c(0, 3, 0, 0))
RColorBrewer::display.brewer.all()
```

## Manually defined mappings

```{r}
presidential |>
    mutate(id = 33 + row_number()) |>
    ggplot(aes(start, id, color = party)) +
    geom_point() +
    geom_segment(aes(xend = end, yend = id)) +
    scale_color_manual(values = c(Republican = "red",
                                  Democratic = "blue"))
```

## Continuous vs diverging color scales

```{r, out.width = "45%"}
#| layout-nrow: 1
df <- data.frame(x = runif(100), y = runif(100),
                 z1 = rnorm(100), z2 = abs(rnorm(100)))

ggplot(df, aes(x, y)) +
    geom_point(aes(color = z2), size = 3)

ggplot(df, aes(x, y)) +
    geom_point(aes(color = z1), size = 3) +
    scale_color_gradient2()
```


## `viridis` color scales

```{r, out.width = "36%", message = FALSE, warning = FALSE}
#| layout-nrow: 1
df <- tibble(x = rnorm(10000), y = rnorm(10000))

ggplot(df, aes(x, y)) +
    geom_hex() +
    coord_fixed()

ggplot(df, aes(x, y)) +
    geom_hex() +
    coord_fixed() +
    viridis::scale_fill_viridis()
```

## Zooming: three methods

\vspace{-12pt}

1. `filter`: adjust the plotted data.
2. Set `xlim` and `ylim` in `coord_cartesian()`.
3. Set the limits in each scale.

```{r, out.width = "40%", message = FALSE, warning = FALSE}
#| layout-nrow: 1

ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = drv)) +
  geom_smooth()

mpg %>% 
  filter(between(displ, 5, 7), between(hwy, 10, 30)) %>% 
  ggplot(aes(displ, hwy)) +
  geom_point(aes(color = class)) + geom_smooth()
```


## Zooming without subsetting

- **Setting limits on individual scales** subsets the data..
- **Using `coord_cartesian()`** zooms in without subsetting the data.

```{r, out.width = "45%", message = FALSE, warning = FALSE}
#| layout-nrow: 1
# Left
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = drv)) + geom_smooth() +
  scale_x_continuous(limits = c(5, 7)) +
  scale_y_continuous(limits = c(10, 30))

# Right
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = drv)) + geom_smooth() +
  coord_cartesian(xlim = c(5, 7), ylim = c(10, 30))
```

## Adjusting the limits in scales I

```{r, out.width = "45%", message = FALSE, warning = FALSE}
#| layout-nrow: 1

suv <- mpg |>
    filter(class == "suv")
compact <- mpg |>
    filter(class == "compact")

ggplot(suv, aes(displ, hwy, color = drv)) +
    geom_point()
ggplot(compact, aes(displ, hwy, color = drv)) +
    geom_point()
```

## Adjusting the limits in scales II

* Training the scales with the `limits` of the full data:

```{r, out.width = "45%", message = FALSE, warning = FALSE}
#| layout-nrow: 1
x_scale <- scale_x_continuous(limits = range(mpg$displ))
y_scale <- scale_y_continuous(limits = range(mpg$hwy))
col_scale <- scale_color_discrete(limits = unique(mpg$drv))

ggplot(suv, aes(displ, hwy, color = drv)) + geom_point() +
    x_scale + y_scale + col_scale
ggplot(compact, aes(displ, hwy, color = drv)) + geom_point() +
    x_scale + y_scale + col_scale
```

## Combining multiple graphs

```{r}
library(patchwork)
p1 <- ggplot(mpg, aes(x = displ, y = hwy)) + geom_point()
p2 <- ggplot(mpg, aes(x = drv, y = hwy)) + geom_boxplot() 
p3 <- ggplot(mpg, aes(x = cty, y = hwy)) + geom_point()
(p1 | p2) / p3
```


## Themes

:::: {.columns}
::: {.column width='48%'}

```{r, message = FALSE}
ggplot(mpg, aes(displ, hwy)) +
    geom_point(aes(color = class)) +
    geom_smooth(se = FALSE) +
    theme_light()
```

:::
::: {.column width='48%'}

```{r, message = FALSE}
ggplot(mpg, aes(displ, hwy)) +
    geom_point(aes(color = class)) +
    geom_smooth(se = FALSE) +
    theme_dark()
```

:::
::::

:::: {.columns}
::: {.column width='48%'}

```{r, message = FALSE}
ggplot(mpg, aes(displ, hwy)) +
    geom_point(aes(color = class)) +
    geom_smooth(se = FALSE) +
    theme_classic()
```

:::
::: {.column width='48%'}

```{r, message = FALSE}
ggplot(mpg, aes(displ, hwy)) +
    geom_point(aes(color = class)) +
    geom_smooth(se = FALSE) +
    ggthemes::theme_fivethirtyeight()
```

:::
::::


## ggplot2 default themes

\vspace{6pt}

```{r, echo = FALSE, out.width = "75%"}
knitr::include_graphics("../assets/r4ds/visualization-themes.png")
```

* More in add-on packages like [ggthemes](https://github.com/jrnold/ggthemes)!
