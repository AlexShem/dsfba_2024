---
title: "DSIBA: Series 3"
subtitle: "Data Wrangling -- 1"
toc: true
toc-depth: 1
format: 
  html:
    number-sections: true
    html-math-method: katex
    self-contained: true
    code-overflow: wrap
    code-tools: true
    code-link: true
  pdf:
    number-sections: true
    include-in-header: 
      text: |
        \usepackage[headsepline]{scrlayer-scrpage}
        \usepackage{fontspec}
        \ihead{DSIBA: Series 3}
        \chead{}
        \ohead{\headmark}
        \automark{section}
    papersize: a4
format-links: false
---

# Introduction

In this series, we focus on data wrangling in R, covering key concepts from data manipulation. These exercises are designed to help you practice tasks such as widening and longening data, handling missing values, selecting and mutating columns, filtering data, and summarising information using the `tidyverse` package.

For this exercise, we will use the `flights` dataset from the `nycflights13` package, which contains information about flights departing from New York City in 2013. The dataset includes details such as flight times, delays, distances, and carrier information. We will explore various data wrangling techniques to manipulate and summarise this dataset effectively.

```{r}
#| echo: true
#| message: false

library(tidyverse)
library(nycflights13)
```

# Counting the Data

## Counting Flights per Tail Number, Carrier, and Month

**Question**

Count the number of flights per `tailnum`, `carrier`, and `month`. This will help you understand how often each aircraft is used by different carriers across different months. Name this dataset `flights_count`.

- Use `count()` to calculate the number of flights per `tailnum`, `carrier`, and `month`.

::: {.content-visible when-format="html"}

**Answer**

```{r}
flights_count <- flights %>%
  count(tailnum, carrier, month)
```

:::

```{r}
#| echo: true
#| eval: true

flights_count
```

# Widening and Longening the Data

## Widening the Data

**Question**

Create a wide version of the `flights_count` dataset named `wide_flights`, where each `carrier` has a separate column for the number of flights per month. Use `tailnum` and `month` as identifiers for each aircraft.

- Use `pivot_wider()` to create a wide table with separate columns for each `carrier`.

::: {.content-visible when-format="html"}

**Answer**

```{r}
wide_flights <- flights_count %>%
  pivot_wider(
    names_from = carrier,
    values_from = n,
    values_fill = list(n = 0)
  )
```

:::

```{r}
#| echo: true
#| eval: true

wide_flights
```

## Longening the Data

**Question**

Create a long version of the `wide_flights` dataset named `long_flights`, where each observation represents a `carrier` and its corresponding number of flights per month for each aircraft (`tailnum`).

- Use `pivot_longer()` to convert the wide table back to a long format.
- Ensure that the final dataset has columns for `tailnum`, `month`, `carrier`, and `n_flights`.

::: {.content-visible when-format="html"}

**Answer**

```{r}
long_flights <- wide_flights %>%
  pivot_longer(
    cols = -c(tailnum, month),
    names_to = "carrier",
    values_to = "n_flights"
  )
```

:::

```{r}
#| echo: true
#| eval: true

long_flights
```

# Handling Missing Values

## Removing Rows with Missing Arrival Delay

**Question**

Remove rows where the `arr_delay` (arrival delay) is missing, as these might indicate cancelled flights. After removing the rows, calculate how many rows were removed from the dataset and explain why removing these rows is a reasonable approach.

- Use `filter()` to exclude rows with missing `arr_delay`.
- Use `nrow()` to calculate the number of rows before and after filtering.

::: {.content-visible when-format="html"}

**Answer**

```{r}
# Number of rows before filtering
initial_rows <- nrow(flights)

# Remove rows with missing arr_delay
flights_no_na <- flights %>%
  filter(!is.na(arr_delay))

# Number of rows after filtering
final_rows <- nrow(flights_no_na)

# Calculate the number of rows removed
num_removed <- initial_rows - final_rows
```

:::

```{r}
#| echo: true
#| eval: true

num_removed
```

# Selecting and Renaming Columns

## Selecting Columns Starting with "arr"

**Question**

Use `select()` to create a new table containing only columns that start with "arr" (e.g., `arr_delay`, `arr_time`). These columns provide information related to the arrival of flights.

- Use `select()` with `starts_with("arr")` to select the columns.

::: {.content-visible when-format="html"}

**Answer**

```{r}
arr_columns <- flights %>%
  select(starts_with("arr"))
```

:::

```{r}
#| echo: true
#| eval: true

arr_columns
```

## Renaming `tailnum` to `aircraft_id`

**Question**

Rename the `tailnum` column to `aircraft_id` to make it more descriptive, and relocate it to the first column in the dataset.

- Use `rename()` to change the column name.
- Use `relocate()` to move the column to the first position.

::: {.content-visible when-format="html"}

**Answer**

```{r}
flights_renamed <- flights %>%
  rename(aircraft_id = tailnum) %>% 
  relocate(aircraft_id)
```

:::

```{r}
#| echo: true
#| eval: true

flights_renamed
```

# Mutating Columns

## Adding Average Speed Column

**Question**

Add a new column called `avg_speed` that calculates the average speed (in miles per hour) for each flight using the `distance` and `air_time` columns.
Relocate `avg_speed` after the `arr_time` column in the dataset.
Note that `air_time` is in minutes, so you will need to convert it to hours for the calculation.

- Use `mutate()` to create the new column.
- Use `.after = arr_time` argument in `mutate()` to place the new column after `arr_time`.

::: {.content-visible when-format="html"}

**Answer**

```{r}
flights_speed <- flights %>%
  mutate(
    avg_speed = distance / (air_time / 60),
    .after = arr_time
  )
```

:::

```{r}
#| echo: true
#| eval: true

flights_speed
```

# Filtering and Excluding Records

## Excluding Certain Flights

**Question**

Exclude flights with a `distance` of less than 500 miles or an `air_time` of less than 60 minutes. Calculate how many flights remain in the dataset after applying this filter.

- Use `filter()` to apply the conditions.
- Use `nrow()` to count the remaining flights.

::: {.content-visible when-format="html"}

**Answer**

```{r}
filtered_flights <- flights %>%
  filter(distance >= 500, air_time >= 60)

remaining_flights <- nrow(filtered_flights)
```

:::

```{r}
#| echo: true
#| eval: true

remaining_flights
```

# Summarising Data

## Creating a Summary Table

**Question**

Create a summary table that shows the **average arrival delay** and **average departure delay** for each combination of `origin` and `carrier`. This will help you understand the delays for different carriers at different origins.

- Use `group_by()` and `summarise()` to calculate the mean delays.
- Ignore missing values using `na.rm = TRUE` in the `mean()` function.

::: {.content-visible when-format="html"}

**Answer**

```{r}
summary_table <- flights %>%
  group_by(origin, carrier) %>%
  summarise(
    mean_arr_delay = mean(arr_delay, na.rm = TRUE),
    mean_dep_delay = mean(dep_delay, na.rm = TRUE)
  )
```

:::

```{r}
#| echo: true
#| eval: true

summary_table
```

# Conclusion

In this exercise, we've practiced various data wrangling techniques using the `tidyverse` package in R. These included counting and reshaping data, handling missing values, selecting and mutating columns, filtering records, and summarising data. Mastery of these techniques is essential for effective data analysis and interpretation.
